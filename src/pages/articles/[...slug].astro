---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Icon from '../../components/Icon.astro';


const { slug } = Astro.params;

const articles = await getCollection('articles', ({ data }) => {
  return data.status === 'published';
});

const article = articles.find((article) => article.slug === slug);

if (!article) {
  return Astro.redirect('/404');
}
const { Content } = await article.render();

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

function getContentTypeIcon(type: string) {
  switch (type) {
    case 'article': return 'FileText';
    case 'thought': return 'MessageCircle';
    case 'quote': return 'Quote';
    case 'reading': return 'BookOpen';
    case 'life': return 'Heart';
    case 'series': return 'Layers';
    default: return 'FileText';
  }
}

function getContentTypeColor(type: string) {
  switch (type) {
    case 'article': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400';
    case 'thought': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400';
    case 'quote': return 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400';
    case 'reading': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';
    case 'life': return 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-400';
    case 'series': return 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-400';
    default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';
  }
}

// Get related articles from the same series if applicable
const relatedArticles = article.data.series ?
  (await getCollection('articles')).filter(a =>
    a.data.series?.name === article.data.series?.name &&
    a.slug !== article.slug &&
    a.data.status === 'published'
  ).sort((a, b) => (a.data.series?.part || 0) - (b.data.series?.part || 0))
  : [];
---

<Layout title={`${article.data.title} - Shaoxuan Yin`} description={article.data.description}>
  <!-- Breadcrumb -->
  <section class="py-6 border-b border-border/50">
    <div class="container">
      <div class="flex items-center gap-2 text-sm text-muted-foreground">
        <a href="/articles" class="hover:text-primary transition-colors">Articles</a>
        <Icon name="ChevronRight" className="w-4 h-4" />
        <span class="capitalize">{article.data.type}</span>
        {article.data.series && (
          <>
            <Icon name="ChevronRight" className="w-4 h-4" />
            <span>{article.data.series.name}</span>
          </>
        )}
      </div>
    </div>
  </section>

  <!-- Quote Layout -->
  {article.data.type === 'quote' && (
    <section class="py-16">
      <div class="container">
        <div class="max-w-3xl mx-auto text-center">
          <div class="mb-8">
            <span class={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium ${getContentTypeColor(article.data.type)}`}>
              <Icon name={getContentTypeIcon(article.data.type)} className="w-4 h-4" />
              Quote
            </span>
          </div>

          <blockquote class="text-3xl font-light leading-relaxed mb-8 text-foreground">
            "{article.data.quote?.text || article.data.title}"
          </blockquote>

          <div class="text-xl text-muted-foreground mb-8">
            ‚Äî {article.data.quote?.author}
            {article.data.quote?.source && (
              <span class="block text-base mt-2">from "{article.data.quote.source}"</span>
            )}
          </div>

          <div class="text-sm text-muted-foreground">
            Saved on {formatDate(article.data.publishedAt)}
            {article.data.location && (
              <span class="block mt-1">üìç {article.data.location}</span>
            )}
          </div>

          {article.data.description && (
            <div class="mt-8 p-6 bg-accent/20 rounded-xl">
              <div class="prose prose-sm dark:prose-invert mx-auto">
                <Content />
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  )}

  <!-- Reading Layout -->
  {article.data.type === 'reading' && (
    <section class="py-16">
      <div class="container">
        <div class="max-w-4xl mx-auto">
          <div class="mb-8">
            <span class={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium ${getContentTypeColor(article.data.type)}`}>
              <Icon name={getContentTypeIcon(article.data.type)} className="w-4 h-4" />
              Reading
            </span>
          </div>

          {article.data.book && (
            <div class="bg-gradient-to-br from-accent/10 to-primary/5 rounded-2xl p-8 mb-8">
              <div class="flex flex-col md:flex-row gap-6 items-start">
                {article.data.book.cover && (
                  <div class="flex-shrink-0">
                    <img
                      src={article.data.book.cover}
                      alt={article.data.book.title}
                      class="w-12 h-16 rounded object-cover shadow-sm"
                      loading="lazy"
                    />
                  </div>
                )}

                <div class="flex-1">
                  <h1 class="text-3xl font-bold mb-2">{article.data.book.title}</h1>
                  <p class="text-xl text-muted-foreground mb-4">by {article.data.book.author}</p>

                  <div class="flex items-center gap-4 mb-4">
                    <span class={`px-3 py-1 rounded-full text-sm font-medium ${
                      article.data.book.status === 'reading' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400' :
                      article.data.book.status === 'finished' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' :
                      'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'
                    }`}>
                      {article.data.book.status === 'reading' ? 'Currently Reading' :
                       article.data.book.status === 'finished' ? 'Finished' : 'Want to Read'}
                    </span>

                    {article.data.book.rating && (
                      <div class="flex items-center gap-1">
                        {Array.from({ length: 5 }, (_, i) => (
                          <Icon
                            name="Star"
                            className={`w-4 h-4 ${i < article.data.book.rating! ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`}
                          />
                        ))}
                      </div>
                    )}
                  </div>

                  <div class="text-sm text-muted-foreground">
                    Started reading on {formatDate(article.data.publishedAt)}
                  </div>
                </div>
              </div>
            </div>
          )}

          <article class="prose prose-lg dark:prose-invert max-w-none">
            <Content />
          </article>
        </div>
      </div>
    </section>
  )}

  <!-- Thought Layout -->
  {article.data.type === 'thought' && (
    <section class="py-16">
      <div class="container">
        <div class="max-w-2xl mx-auto">
          <div class="mb-6">
            <span class={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${getContentTypeColor(article.data.type)}`}>
              <Icon name={getContentTypeIcon(article.data.type)} className="w-4 h-4" />
              Thought
            </span>
          </div>

          <h1 class="text-2xl font-bold mb-4">{article.data.title}</h1>

          <div class="flex items-center gap-4 text-sm text-muted-foreground mb-8">
            <span>{formatDate(article.data.publishedAt)}</span>
            {article.data.readingTime && (
              <>
                <span>‚Ä¢</span>
                <span>{article.data.readingTime} min read</span>
              </>
            )}
            {article.data.location && (
              <>
                <span>‚Ä¢</span>
                <span>üìç {article.data.location}</span>
              </>
            )}
          </div>

          <article class="prose dark:prose-invert max-w-none">
            <Content />
          </article>

          {article.data.mood && (
            <div class="mt-8 p-4 bg-accent/20 rounded-lg">
              <div class="text-sm text-muted-foreground">
                Mood: <span class="italic">{article.data.mood}</span>
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  )}

  <!-- Article/Life/Series Layout -->
  {(article.data.type === 'article' || article.data.type === 'life' || article.data.type === 'series') && (
    <section class="py-16">
      <div class="container">
        <div class="max-w-4xl mx-auto">

          <!-- Header -->
          <header class="mb-12">
            <div class="flex items-center gap-3 mb-6">
              <span class={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium ${getContentTypeColor(article.data.type)}`}>
                <Icon name={getContentTypeIcon(article.data.type)} className="w-4 h-4" />
                {article.data.type === 'series' ? 'Series' : article.data.type === 'life' ? 'Life' : 'Article'}
              </span>

              {article.data.series && (
                <span class="text-sm text-muted-foreground">
                  Part {article.data.series.part}
                  {article.data.series.total && ` of ${article.data.series.total}`}
                </span>
              )}
            </div>

            <h1 class="text-4xl font-bold mb-6">{article.data.title}</h1>

            {article.data.description && (
              <p class="text-xl text-muted-foreground mb-6 leading-relaxed">
                {article.data.description}
              </p>
            )}

            {article.data.coverImage && (
              <div class="aspect-video rounded-2xl overflow-hidden mb-8 shadow-xl">
                <img
                  src={article.data.coverImage.src}
                  alt={article.data.coverImage.alt || article.data.title}
                  class="w-full h-full object-cover"
                  loading="lazy"
                />
                {article.data.coverImage.caption && (
                  <p class="text-sm text-muted-foreground text-center mt-3 italic">
                    {article.data.coverImage.caption}
                  </p>
                )}
              </div>
            )}

            <div class="flex flex-wrap items-center gap-6 text-sm text-muted-foreground">
              <span>Published {formatDate(article.data.publishedAt)}</span>
              {article.data.readingTime && (
                <span>{article.data.readingTime} min read</span>
              )}
              {article.data.updatedAt && (
                <span>Updated {formatDate(article.data.updatedAt)}</span>
              )}
              {article.data.location && (
                <span>üìç {article.data.location}</span>
              )}
            </div>

            {article.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mt-4">
                {article.data.tags.map(tag => (
                  <span class="px-3 py-1 bg-accent text-accent-foreground rounded-full text-sm">
                    #{tag}
                  </span>
                ))}
              </div>
            )}
          </header>

          <!-- Content -->
          <article class="prose prose-lg dark:prose-invert max-w-none">
            <Content />
          </article>

          <!-- Links -->
          {article.data.links.length > 0 && (
            <div class="mt-12 p-6 bg-accent/20 rounded-xl">
              <h3 class="text-lg font-semibold mb-4">Related Links</h3>
              <div class="space-y-3">
                {article.data.links.map(link => (
                  <a
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="block p-3 border border-border rounded-lg hover:bg-accent/50 transition-colors group"
                  >
                    <div class="flex items-center gap-2">
                      <Icon name="ExternalLink" className="w-4 h-4 text-primary" />
                      <span class="font-medium group-hover:text-primary transition-colors">{link.title}</span>
                    </div>
                    {link.description && (
                      <p class="text-sm text-muted-foreground mt-1">{link.description}</p>
                    )}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </section>
  )}

  <!-- Series Navigation -->
  {article.data.series && relatedArticles.length > 0 && (
    <section class="py-12 bg-accent/10">
      <div class="container">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-2xl font-bold mb-6">More from "{article.data.series.name}"</h2>

          <div class="grid md:grid-cols-2 gap-4">
            {relatedArticles.map(related => (
              <a href={`/articles/${related.slug}`} class="block">
                <div class="p-4 border border-border rounded-lg hover:bg-accent/50 transition-colors group">
                  <div class="flex items-center gap-2 mb-2">
                    <span class="text-xs px-2 py-1 bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-400 rounded-full">
                      Part {related.data.series?.part}
                    </span>
                  </div>
                  <h3 class="font-semibold group-hover:text-primary transition-colors">
                    {related.data.title}
                  </h3>
                  {related.data.description && (
                    <p class="text-sm text-muted-foreground mt-1 line-clamp-2">
                      {related.data.description}
                    </p>
                  )}
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </section>
  )}

  <!-- Navigation -->
  <section class="py-8 border-t border-border/50">
    <div class="container">
      <div class="max-w-4xl mx-auto flex justify-between items-center">
        <a
          href="/articles"
          class="inline-flex items-center text-sm text-muted-foreground hover:text-primary transition-colors"
        >
          <Icon name="ArrowLeft" className="mr-2 w-4 h-4" />
          Back to Articles
        </a>

        <a
          href="/articles/stream"
          class="inline-flex items-center text-sm text-muted-foreground hover:text-primary transition-colors"
        >
          View Stream
          <Icon name="ArrowRight" className="ml-2 w-4 h-4" />
        </a>
      </div>
    </div>
  </section>
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .prose img {
    border-radius: 0.75rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
</style>
