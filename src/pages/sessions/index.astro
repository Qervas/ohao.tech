---
import Layout from '../../layouts/Layout.astro';
import Icon from '../../components/Icon.astro';
import { getCollection } from 'astro:content';

export const prerender = true;

// Get all sessions and sort by date
const allSessions = await getCollection('sessions');
const sessions = allSessions.sort((a, b) => b.data.startedAt.valueOf() - a.data.startedAt.valueOf());

// Get all articles that reference sessions
const allArticles = await getCollection('articles', ({ data }) => {
  return data.status === 'published' && data.session;
});

// Group sessions by status
const activeSessions = sessions.filter(session => session.data.status === 'active');
const completedSessions = sessions.filter(session => session.data.status === 'completed');
const pausedSessions = sessions.filter(session => session.data.status === 'paused');

// Session type icons
const getSessionIcon = (type: string) => {
  const iconMap = {
    book: 'BookOpen',
    music: 'Music',
    course: 'GraduationCap',
    project: 'Code2',
    series: 'Layers'
  };
  return iconMap[type] || 'BookOpen';
};

// Status colors
const getStatusColor = (status: string) => {
  const colorMap = {
    active: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400',
    completed: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400',
    paused: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400'
  };
  return colorMap[status] || colorMap.active;
};

// Get articles for a session
const getSessionArticles = (sessionSlug: string) => {
  return allArticles.filter(article => article.data.session?.slug === sessionSlug);
};

// Format date
function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}

// Calculate progress for sessions
const getProgress = (session: any) => {
  if (session.data.type === 'book' && session.data.book) {
    if (session.data.book.totalChapters && session.data.book.currentChapter) {
      return Math.round((session.data.book.currentChapter / session.data.book.totalChapters) * 100);
    }
    if (session.data.book.totalPages && session.data.book.currentPage) {
      return Math.round((session.data.book.currentPage / session.data.book.totalPages) * 100);
    }
  }
  if (session.data.type === 'course' && session.data.course) {
    if (session.data.course.totalLessons && session.data.course.currentLesson) {
      return Math.round((session.data.course.currentLesson / session.data.course.totalLessons) * 100);
    }
  }
  return null;
};
---

<Layout title="Learning Sessions">
  <!-- Header -->
  <section class="py-12 border-b border-border/50">
    <div class="container">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl font-bold mb-4">Learning Sessions</h1>
        <p class="text-xl text-muted-foreground mb-8">
          Deep dives into books, courses, music, and projects with ongoing commentary and insights
        </p>

        <!-- Stats -->
        <div class="grid grid-cols-3 gap-6 max-w-md mx-auto">
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">{activeSessions.length}</div>
            <div class="text-sm text-muted-foreground">Active</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600">{completedSessions.length}</div>
            <div class="text-sm text-muted-foreground">Completed</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-yellow-600">{pausedSessions.length}</div>
            <div class="text-sm text-muted-foreground">Paused</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <div class="container py-12">
    <!-- Active Sessions -->
    {activeSessions.length > 0 && (
      <section class="mb-16">
        <h2 class="text-2xl font-bold mb-8 flex items-center gap-2">
          <Icon name="Play" className="w-6 h-6 text-green-600" />
          Currently Active
        </h2>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {activeSessions.map(session => {
            const articles = getSessionArticles(session.slug);
            const progress = getProgress(session);
            return (
              <div class="group border border-border rounded-xl overflow-hidden hover:border-primary/50 transition-all duration-300 hover:shadow-lg">
                {session.data.coverImage && (
                  <div class="aspect-video overflow-hidden">
                    <img
                      src={session.data.coverImage.src}
                      alt={session.data.coverImage.alt}
                      class="w-full h-full object-contain group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                )}

                <div class="p-6">
                  <div class="flex items-start justify-between mb-3">
                    <div class="flex items-center gap-2">
                      <Icon name={getSessionIcon(session.data.type)} className="w-5 h-5 text-primary" />
                      <span class={`text-xs px-2 py-1 rounded-full ${getStatusColor(session.data.status)}`}>
                        {session.data.status}
                      </span>
                    </div>
                    {progress && (
                      <span class="text-sm text-muted-foreground">{progress}%</span>
                    )}
                  </div>

                  <h3 class="font-semibold mb-2 group-hover:text-primary transition-colors">
                    <a href={`/sessions/${session.slug}`}>{session.data.title}</a>
                  </h3>

                  {session.data.description && (
                    <p class="text-sm text-muted-foreground mb-3">{session.data.description}</p>
                  )}

                  {/* Progress bar */}
                  {progress && (
                    <div class="w-full bg-muted rounded-full h-2 mb-3">
                      <div
                        class="bg-primary h-2 rounded-full transition-all duration-300"
                        style={`width: ${progress}%`}
                      ></div>
                    </div>
                  )}

                  <div class="flex items-center justify-between text-sm text-muted-foreground">
                    <span>{articles.length} post{articles.length !== 1 ? 's' : ''}</span>
                    <span>{formatDate(session.data.startedAt)}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    )}

    <!-- Completed Sessions -->
    {completedSessions.length > 0 && (
      <section class="mb-16">
        <h2 class="text-2xl font-bold mb-8 flex items-center gap-2">
          <Icon name="CheckCircle" className="w-6 h-6 text-blue-600" />
          Completed
        </h2>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {completedSessions.map(session => {
            const articles = getSessionArticles(session.slug);
            return (
              <div class="group border border-border rounded-xl overflow-hidden hover:border-primary/50 transition-all duration-300 hover:shadow-lg opacity-75 hover:opacity-100">
                {session.data.coverImage && (
                  <div class="aspect-video overflow-hidden">
                    <img
                      src={session.data.coverImage.src}
                      alt={session.data.coverImage.alt}
                      class="w-full h-full object-contain group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                )}

                <div class="p-6">
                  <div class="flex items-start justify-between mb-3">
                    <div class="flex items-center gap-2">
                      <Icon name={getSessionIcon(session.data.type)} className="w-5 h-5 text-primary" />
                      <span class={`text-xs px-2 py-1 rounded-full ${getStatusColor(session.data.status)}`}>
                        {session.data.status}
                      </span>
                    </div>
                  </div>

                  <h3 class="font-semibold mb-2 group-hover:text-primary transition-colors">
                    <a href={`/sessions/${session.slug}`}>{session.data.title}</a>
                  </h3>

                  {session.data.description && (
                    <p class="text-sm text-muted-foreground mb-3">{session.data.description}</p>
                  )}

                  <div class="flex items-center justify-between text-sm text-muted-foreground">
                    <span>{articles.length} post{articles.length !== 1 ? 's' : ''}</span>
                    <span>{formatDate(session.data.completedAt || session.data.startedAt)}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    )}

    <!-- Paused Sessions -->
    {pausedSessions.length > 0 && (
      <section>
        <h2 class="text-2xl font-bold mb-8 flex items-center gap-2">
          <Icon name="Pause" className="w-6 h-6 text-yellow-600" />
          Paused
        </h2>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {pausedSessions.map(session => {
            const articles = getSessionArticles(session.slug);
            const progress = getProgress(session);
            return (
              <div class="group border border-border rounded-xl overflow-hidden hover:border-primary/50 transition-all duration-300 hover:shadow-lg opacity-60 hover:opacity-100">
                {session.data.coverImage && (
                  <div class="aspect-video overflow-hidden">
                    <img
                      src={session.data.coverImage.src}
                      alt={session.data.coverImage.alt}
                      class="w-full h-full object-contain group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                )}

                <div class="p-6">
                  <div class="flex items-start justify-between mb-3">
                    <div class="flex items-center gap-2">
                      <Icon name={getSessionIcon(session.data.type)} className="w-5 h-5 text-primary" />
                      <span class={`text-xs px-2 py-1 rounded-full ${getStatusColor(session.data.status)}`}>
                        {session.data.status}
                      </span>
                    </div>
                    {progress && (
                      <span class="text-sm text-muted-foreground">{progress}%</span>
                    )}
                  </div>

                  <h3 class="font-semibold mb-2 group-hover:text-primary transition-colors">
                    <a href={`/sessions/${session.slug}`}>{session.data.title}</a>
                  </h3>

                  {session.data.description && (
                    <p class="text-sm text-muted-foreground mb-3">{session.data.description}</p>
                  )}

                  {progress && (
                    <div class="w-full bg-muted rounded-full h-2 mb-3">
                      <div
                        class="bg-yellow-500 h-2 rounded-full transition-all duration-300"
                        style={`width: ${progress}%`}
                      ></div>
                    </div>
                  )}

                  <div class="flex items-center justify-between text-sm text-muted-foreground">
                    <span>{articles.length} post{articles.length !== 1 ? 's' : ''}</span>
                    <span>{formatDate(session.data.startedAt)}</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>
    )}

    {sessions.length === 0 && (
      <div class="text-center py-16">
        <Icon name="BookOpen" className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
        <h3 class="text-xl font-semibold mb-2">No sessions yet</h3>
        <p class="text-muted-foreground">Start your first learning session to track your progress and insights.</p>
      </div>
    )}
  </div>
</Layout>
