---
export interface Props {
  src: string;
  alt: string;
  caption?: string;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  aspectRatio?: 'video' | 'square' | 'portrait' | 'auto';
  clickable?: boolean;
}

const {
  src,
  alt,
  caption,
  class: className = '',
  loading = 'lazy',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  aspectRatio = 'video',
  clickable = false
} = Astro.props;

// Determine aspect ratio class
const aspectClass = {
  video: 'aspect-video',
  square: 'aspect-square',
  portrait: 'aspect-[3/4]',
  auto: ''
}[aspectRatio];

// Generate responsive image URLs for different sizes
const baseUrl = src.replace(/\.[^/.]+$/, ''); // Remove extension
const extension = src.split('.').pop();

// For now, we'll use the original image but this could be extended
// to generate multiple sizes using Astro's image optimization
const responsiveImages = {
  small: src, // 400w
  medium: src, // 800w
  large: src, // 1200w
  xlarge: src // 1920w
};
---

<div class={`group relative ${className}`}>
  <div class={`overflow-hidden rounded-lg ${aspectClass}`}>
    {clickable ? (
      <button
        class="w-full h-full focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-2"
        onclick="openImageModal(this)"
      >
        <img
          src={src}
          alt={alt}
          loading={loading}
          sizes={sizes}
          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
        />
      </button>
    ) : (
      <img
        src={src}
        alt={alt}
        loading={loading}
        sizes={sizes}
        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
      />
    )}
  </div>

  {caption && (
    <p class="text-sm text-muted-foreground text-center mt-2 px-2">
      {caption}
    </p>
  )}
</div>

{clickable && (
  <script>
    function openImageModal(button) {
      const img = button.querySelector('img');
      if (!img) return;

      // Create modal overlay
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm';
      modal.onclick = () => modal.remove();

      // Create modal content
      const modalContent = document.createElement('div');
      modalContent.className = 'relative max-w-7xl max-h-full p-4';
      modalContent.onclick = (e) => e.stopPropagation();

      // Create large image
      const modalImg = document.createElement('img');
      modalImg.src = img.src;
      modalImg.alt = img.alt;
      modalImg.className = 'max-w-full max-h-full object-contain rounded-lg';

      // Create close button
      const closeBtn = document.createElement('button');
      closeBtn.innerHTML = 'Ã—';
      closeBtn.className = 'absolute top-2 right-2 w-8 h-8 bg-black/50 text-white rounded-full hover:bg-black/70 transition-colors text-xl leading-none';
      closeBtn.onclick = () => modal.remove();

      modalContent.appendChild(modalImg);
      modalContent.appendChild(closeBtn);
      modal.appendChild(modalContent);
      document.body.appendChild(modal);

      // Prevent body scroll
      document.body.style.overflow = 'hidden';

      // Cleanup on close
      modal.addEventListener('remove', () => {
        document.body.style.overflow = '';
      });

      // Close on escape key
      const handleEscape = (e) => {
        if (e.key === 'Escape') {
          modal.remove();
          document.removeEventListener('keydown', handleEscape);
        }
      };
      document.addEventListener('keydown', handleEscape);
    }
  </script>
)}

<style>
  /* Smooth aspect ratio transitions */
  .aspect-video {
    aspect-ratio: 16 / 9;
  }

  .aspect-square {
    aspect-ratio: 1 / 1;
  }

  .aspect-\[3\/4\] {
    aspect-ratio: 3 / 4;
  }

  /* Focus states for accessibility */
  button:focus-visible {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
  }

  /* Hover effects */
  .group:hover img {
    transform: scale(1.05);
  }

  /* Loading state */
  img {
    background-color: hsl(var(--muted));
    background-image: linear-gradient(
      45deg,
      hsl(var(--muted)) 25%,
      transparent 25%,
      transparent 75%,
      hsl(var(--muted)) 75%,
      hsl(var(--muted))
    );
    background-size: 20px 20px;
    animation: loading 1s linear infinite;
  }

  img[loaded] {
    animation: none;
    background: none;
  }

  @keyframes loading {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 20px 20px;
    }
  }
</style>

<script>
  // Add loaded attribute when image loads
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (img.complete) {
        img.setAttribute('loaded', '');
      } else {
        img.addEventListener('load', () => {
          img.setAttribute('loaded', '');
        });
      }
    });
  });
</script>
